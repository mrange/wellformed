<#@ import      namespace   = "System.Collections.Generic"      #>
<#@ import      namespace   = "System.Globalization"            #>
<#@ import      namespace   = "System.IO"                       #>
<#@ include     file        ="IncludeHeader.ttinclude"          #>
<#
    // ----------------------------------------------------------------------------------------------
    // Copyright (c) Mårten Rånge.
    // ----------------------------------------------------------------------------------------------
    // This source code is subject to terms and conditions of the Microsoft Public License. A 
    // copy of the license can be found in the License.html file at the root of this distribution. 
    // If you cannot locate the  Microsoft Public License, please send an email to 
    // dlr@microsoft.com. By using this source code in any fashion, you are agreeing to be bound 
    //  by the terms of the Microsoft Public License.
    // ----------------------------------------------------------------------------------------------
    // You must not remove this notice, or any other, from this software.
    // ----------------------------------------------------------------------------------------------
#>
<#+
    const string Extension_RootPath     = @"https://raw.github.com/";

    Uri Local_CombinePath (string containerPath, string localPath)
    {
        localPath = localPath.Replace (@"\", "/");

        Uri uri;
        Uri containerUri;

        var uriCreated = 
                Uri.TryCreate (localPath, UriKind.Absolute, out uri)
            ||  (
                        Uri.TryCreate (containerPath, UriKind.Absolute, out containerUri)
                    &&  Uri.TryCreate (containerUri, localPath, out uri)
                )
            ; 

        if (!uriCreated)
        {
            throw new Exception (string.Format (
                CultureInfo.InvariantCulture,
                "Couldn't create URI from: {0} and {1}",
                containerPath,
                localPath
                ));
        }

        return uri;
    }

    Uri Local_GetFullPath (IncludeFile include)
    {
        var localPath   = include.LocalPath ?? ""; 
        var fullPath    = 
            Local_CombinePath (
                RootPath, 
                localPath.Replace ("/", @"\")
            );
        return fullPath;
    }

    string Extension_CombinePath (string containerPath, string localPath)
    {
        return Local_CombinePath (containerPath, localPath).AbsoluteUri;
    }

    string Extension_GetFullPath (IncludeFile include)
    {
        return Local_GetFullPath (include).AbsoluteUri;
    }

    string Extension_GetFullContainer (IncludeFile include)
    {
        return Extension_GetFullPath (include);
    }

    string[] Extension_ReadAllLines (IncludeFile include)
    {
        var fullPath = Extension_GetFullPath (include);

        var wc = new WebClient ();
        var result = wc.DownloadString (fullPath);

        var lines = new List<string> (16); 
        string line;

        using (var reader = new StringReader (result))
        {
            while ((line = reader.ReadLine ()) != null)
            {
                lines.Add (line);
            }    
        }

        return lines.ToArray ();
    }

    bool Extension_Exists (IncludeFile include)
    {
        return true;
    }

#>

