<#@ include     file        ="Header.ttinclude"             #>

<#
    // ----------------------------------------------------------------------------------------------
    // Copyright (c) Mårten Rånge.
    // ----------------------------------------------------------------------------------------------
    // This source code is subject to terms and conditions of the Microsoft Public License. A 
    // copy of the license can be found in the License.html file at the root of this distribution. 
    // If you cannot locate the  Microsoft Public License, please send an email to 
    // dlr@microsoft.com. By using this source code in any fashion, you are agreeing to be bound 
    //  by the terms of the Microsoft Public License.
    // ----------------------------------------------------------------------------------------------
    // You must not remove this notice, or any other, from this software.
    // ----------------------------------------------------------------------------------------------
#>

// ReSharper disable PartialTypeWithSinglePart

namespace <#=Namespace#>
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;

    static partial class ParseExtensions
    {
        static readonly Dictionary<Type, Func<object>> s_defaultValues = new Dictionary<Type, Func<object>> 
            {
<#
    foreach (var nd in Model)
    {
#>
#if !T4INCLUDE__SUPPRESS_<#=nd.Name.ToUpperInvariant ()#>_PARSE_EXTENSIONS
                { typeof(<#=nd.Name#>)      , () => default (<#=nd.Name#>)},
                { typeof(<#=nd.Name#>?)     , () => default (<#=nd.Name#>?)},
#endif
<#
    }
#>
            };
        static readonly Dictionary<Type, Func<string, CultureInfo, object>> s_parsers = new Dictionary<Type, Func<string, CultureInfo, object>> 
            {
<#
    foreach (var nd in Model)
    {
#>
#if !T4INCLUDE__SUPPRESS_<#=nd.Name.ToUpperInvariant ()#>_PARSE_EXTENSIONS
                { typeof(<#=nd.Name#>)  , (s, ci) => { <#=nd.Name#> value; return s.TryParse(ci, out value) ? (object)value : null;}},
                { typeof(<#=nd.Name#>?) , (s, ci) => { <#=nd.Name#> value; return s.TryParse(ci, out value) ? (object)(<#=nd.Name#>?)value : null;}},
#endif
<#
    }
#>
            };

        public static bool CanParse (this Type type)
        {
            if (type == null)
            {
                return false;
            }

            return s_parsers.ContainsKey (type);
        }

        public static object GetParsedDefaultValue (this Type type)
        {
            type = type ?? typeof (object);

            Func<object> getValue;

            return s_defaultValues.TryGetValue (type, out getValue) ? getValue () : null;
        }

        public static bool TryParse (this string s, CultureInfo cultureInfo, Type type, out object value)
        {
            value = null;
            if (type == null)
            {
                return false;
            }                
            
            Func<string, CultureInfo, object> parser;

            if (s_parsers.TryGetValue (type, out parser))
            {
                value = parser (s, cultureInfo);
            }

            return value != null;
        }

        public static bool TryParse (this string s, Type type, out object value)
        {
            return s.TryParse (<#=DefaultCulture#>, type, out value);
        }

        public static object Parse (this string s, CultureInfo cultureInfo, Type type, object defaultValue)
        {
            object value;
            return s.TryParse (cultureInfo, type, out value) ? value : defaultValue;
        }

        public static object Parse (this string s, Type type, object defaultValue)
        {
            return s.Parse (<#=DefaultCulture#>, type, defaultValue);
        }

<#
    foreach (var nd in Model)
    {
#>
        // <#=nd.Name#> (<#=nd.Type#>)

#if !T4INCLUDE__SUPPRESS_<#=nd.Name.ToUpperInvariant ()#>_PARSE_EXTENSIONS

        public static bool TryParse (this string s, out <#=nd.Name#> value)
        {
            return s.TryParse (<#=DefaultCulture#>, out value);
        }

        public static <#=nd.Name#> Parse (this string s, CultureInfo cultureInfo, <#=nd.Name#> defaultValue)
        {
            <#=nd.Name#> value;

            return s.TryParse (cultureInfo, out value) ? value : defaultValue;
        }

        public static <#=nd.Name#> Parse (this string s, <#=nd.Name#> defaultValue)
        {
            return s.Parse (<#=DefaultCulture#>, defaultValue);
        }

<#
    if (nd.Type == ParseType.BoolLike)
    {
#>
        public static bool TryParse (this string s, CultureInfo cultureInfo, out <#=nd.Name#> value)
        {
            return <#=nd.Name#>.TryParse (s ?? "", out value);
        }
<#
    }
    else if (nd.Type == ParseType.CharLike)
    {
#>
        public static bool TryParse (this string s, CultureInfo cultureInfo, out <#=nd.Name#> value)
        {
            return <#=nd.Name#>.TryParse (s ?? "", out value);
        }
<#
    }
    else if (nd.Type == ParseType.IntLike)
    {
#>
        public static bool TryParse (this string s, CultureInfo cultureInfo, out <#=nd.Name#> value)
        {
            return <#=nd.Name#>.TryParse (s ?? "", NumberStyles.Integer, cultureInfo, out value);
        }
<#
    }
    else if (nd.Type == ParseType.DateTimeLike)
    {
#>
        public static bool TryParse (this string s, CultureInfo cultureInfo, out <#=nd.Name#> value)
        {                                                  
            return <#=nd.Name#>.TryParse (s ?? "", cultureInfo, DateTimeStyles.AssumeLocal, out value);
        }
<#
    }
    else if (nd.Type == ParseType.TimeSpanLike)
    {
#>
        public static bool TryParse (this string s, CultureInfo cultureInfo, out <#=nd.Name#> value)
        {                                                  
            return <#=nd.Name#>.TryParse (s ?? "", cultureInfo, out value);
        }
<#
    }
    else if (nd.Type == ParseType.FloatLike)
    {
#>
        public static bool TryParse (this string s, CultureInfo cultureInfo, out <#=nd.Name#> value)
        {                                                  
            return <#=nd.Name#>.TryParse (s ?? "", NumberStyles.Float, cultureInfo, out value);
        }
<#
    }
    else if (nd.Type == ParseType.EnumLike)
    {
#>
        public static bool TryParse (this string s, CultureInfo cultureInfo, out <#=nd.Name#> value)
        {                                                  
            return Enum.TryParse (s ?? "", true, out value);              
        }
<#
    }
#>

#endif // T4INCLUDE__SUPPRESS_<#=nd.Name.ToUpperInvariant ()#>_PARSE_EXTENSIONS

<#
    }
#>
    }
}

<#+
    enum ParseType
    {
        BoolLike    ,
        CharLike    ,
        IntLike     ,
        FloatLike   ,
        EnumLike    ,
        DateTimeLike,
        TimeSpanLike,
    }

    string            Namespace         = "T4Include"                       ;
    string            DefaultCulture    = "CultureInfo.InvariantCulture"    ;
    ParseDefinition[] Model             = new ParseDefinition[0]            ;    

    sealed class ParseDefinition : BaseEntity<Root>
    {
        public ParseType    Type;
        public string           Name;
    }

    static ParseDefinition Create (ParseType type, string name)
    {
        return new ParseDefinition
        {
            Type = type             ,
            Name = name ?? S_NoName ,
        };
    }

    static ParseDefinition B (string name)
    {
        return Create (ParseType.BoolLike, name);
    }

    static ParseDefinition C (string name)
    {
        return Create (ParseType.CharLike, name);
    }

    static ParseDefinition F (string name)
    {
        return Create (ParseType.FloatLike, name);
    }

    static ParseDefinition I (string name)
    {
        return Create (ParseType.IntLike, name);
    }

    static ParseDefinition E (string name)
    {
        return Create (ParseType.EnumLike, name);
    }

    static ParseDefinition DT (string name)
    {
        return Create (ParseType.DateTimeLike, name);
    }

    static ParseDefinition TS (string name)
    {
        return Create (ParseType.TimeSpanLike, name);
    }
#>
